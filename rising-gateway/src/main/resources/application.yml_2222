server:
  port: 8000

spring:
  application:
    name: gateway-server
  redis:
    host: ${REDIS_HOST:127.0.0.1}
    port: ${REDIS_PORT:6379}
    timeout: 5000 #连接超时 毫秒
    jedis:
      pool:
        maxActive: 3
        maxIdle: 3
        minIdle: 1
        maxWait: -1 #连接池最大等行时间 -1没有限制
zuul:
  routes:
#    #车辆管理服务路由
#    car-server:
#      path: /car/**
#      serviceId: car-server #微服务名称，网关会从eureka中获取该服务名称下的服务实例的地址
#      # 例子：将请求转发到http://localhost:31200/course
#     # url: http://www.baidu.com #也可指定url，此url也可以是外网地址\
#      strip-prefix: false #true：代理转发时去掉前缀，false:代理转发时不去掉前缀
#      sensitiveHeaders:  #默认zuul会屏蔽cookie，cookie不会传到下游服务，这里设置为空则取消默认的黑名单，如果设置了具体的头信息则不会传到下游服务
#      #ignoredHeaders: 默认为空表示不过虑任何头
#
#    #保险管理服务路由
#    insurance-server:  #路由名称，名称任意，保持所有路由名称唯一
#      path: /insurance/**
#      serviceId: insurance-server #指定服务id，从Eureka中找到服务的ip和端口
#      strip-prefix: false
#      sensitiveHeaders:
#
#    #提醒管理路由
#    remind-server:  #路由名称，名称任意，保持所有路由名称唯一
#      path: /remind/**
#      serviceId: remind-server #指定服务id，从Eureka中找到服务的ip和端口
#      strip-prefix: false
#      sensitiveHeaders:
#
#    #借款管理路由
#    loan-server:  #路由名称，名称任意，保持所有路由名称唯一
#      path: /loan/**
#      serviceId: loan-server #指定服务id，从Eureka中找到服务的ip和端口
#      strip-prefix: false
#      sensitiveHeaders:

      #订单管理路由
      order-service:  #路由名称，名称任意，保持所有路由名称唯一
        path: /order/**
#        url: http://localhost:10000
        serviceId: order-service #指定服务id，从Eureka中找到服务的ip和端口
        strip-prefix: false
        sensitiveHeaders:
      #价格管理路由
#      price-server:  #路由名称，名称任意，保持所有路由名称唯一
#        path: /price/**
#        url: http://localhost:4000
#        serviceId: price-server #指定服务id，从Eureka中找到服务的ip和端口
#        strip-prefix: false
#        sensitiveHeaders:

      #uaa认证中心管理路由
      uaa-server:  #路由名称，名称任意，保持所有路由名称唯一
        path: /uaa/**
        serviceId: uaa-server #指定服务id，从Eureka中找到服务的ip和端口
#        url: http://localhost:4000 #也可指定url，此url也可以是外网地址\
        strip-prefix: false
        sensitiveHeaders:
eureka:
  client:
    registerWithEureka: true #服务注册开关
    fetchRegistry: true #服务发现开关
    serviceUrl: #Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔
      defaultZone: ${EUREKA_SERVER:http://localhost:20000/eureka/}
  instance:
    prefer-ip-address:  true  #将自己的ip地址注册到Eureka服务中
    ip-address: 127.0.0.1
    instance-id: ${spring.application.name}:${server.port} #指定实例id



security:
  oauth2:
    client:
      client-id: gateway-server
      client-secret: 123456
    resource:
      jwt:
        key-uri: http://127.0.0.1:4000/oauth/token_key
meet:
  zuul:
    swaggerDocument: |-
      [
      {
        "name": "车辆管理",
        "location": "/car/v2/api-docs",
        "version": "1.0"
      },
      {
        "name": "保险管理",
        "location": "/insurance/v2/api-docs",
        "version": "1.0"
      },
      {
        "name": "借款管理",
        "location": "/loan/v2/api-docs",
        "version": "1.0"
      },
      {
        "name": "提醒管理",
        "location": "/remind/v2/api-docs",
        "version": "1.0"
      }
      ]
